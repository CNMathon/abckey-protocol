syntax = "proto3";
package abckey;
import "google/protobuf/descriptor.proto";
/**
 * Options for specifying message direction and type of wire (normal/debug)
 */
extend google.protobuf.EnumValueOptions {
    optional bool wire_in = 50002;              // message can be transmitted via wire from PC to ABCKEY
    optional bool wire_out = 50003;             // message can be transmitted via wire from ABCKEY to PC
    optional bool wire_debug_in = 50004;        // message can be transmitted via debug wire from PC to ABCKEY
    optional bool wire_debug_out = 50005;       // message can be transmitted via debug wire from ABCKEY to PC
    optional bool wire_tiny = 50006;            // message is handled by ABCKEY when the USB stack is in tiny mode
    optional bool wire_bootloader = 50007;      // message is only handled by ABCKEY Bootloader
    optional bool wire_no_fsm = 50008;          // message is not handled by ABCKEY unless the USB stack is in tiny mode
}

/**
 * Mapping between ABCKEY wire identifier (uint) and a protobuf message
 */
enum type {
    // Bootloader
    fwErase = 6 [(wire_in) = true, (wire_bootloader) = true];
    fwUpload = 7 [(wire_in) = true, (wire_bootloader) = true];
    fwRequest = 8 [(wire_out) = true, (wire_bootloader) = true];
    SelfTest = 32 [(wire_in) = true, (wire_bootloader) = true];

    // Crypto
    CipherKeyValue = 23 [(wire_in) = true];
    CipheredKeyValue = 48 [(wire_out) = true];
    SignIdentity = 53 [(wire_in) = true];
    SignedIdentity = 54 [(wire_out) = true];
    GetECDHSessionKey = 61 [(wire_in) = true];
    ECDHSessionKey = 62 [(wire_out) = true];
    CosiCommit = 71 [(wire_in) = true];
    CosiCommitment = 72 [(wire_out) = true];
    CosiSign = 73 [(wire_in) = true];
    CosiSignature = 74 [(wire_out) = true];

    // Debug
    DebugLinkDecision = 100 [(wire_debug_in) = true, (wire_tiny) = true, (wire_no_fsm) = true];
    DebugLinkGetState = 101 [(wire_debug_in) = true, (wire_tiny) = true];
    DebugLinkState = 102 [(wire_debug_out) = true];
    DebugLinkStop = 103 [(wire_debug_in) = true];
    DebugLinkLog = 104 [(wire_debug_out) = true];
    DebugLinkMemoryRead = 110 [(wire_debug_in) = true];
    DebugLinkMemory = 111 [(wire_debug_out) = true];
    DebugLinkMemoryWrite = 112 [(wire_debug_in) = true];
    DebugLinkFlashErase = 113 [(wire_debug_in) = true];
}
