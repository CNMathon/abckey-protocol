syntax = "proto3";

import "common.proto";

/**
 * Type of script which will be used for transaction output
 */
enum InputScriptType {
  SPENDADDRESS = 0;      // standard P2PKH address
  SPENDMULTISIG = 1;     // P2SH multisig address
  EXTERNAL = 2;          // reserved for external inputs (coinjoin)
  SPENDWITNESS = 3;      // native SegWit
  SPENDP2SHWITNESS = 4;  // SegWit over P2SH (backward compatible)
}

/**
 * Type of redeem script used in input
 * #embed
 */
message MultisigRedeemScriptType {
  HDNodePathType pubkeys = 1;  // pubkeys from multisig address (sorted lexicographically)
  bytes signatures = 2;        // existing signatures for partially signed input
  uint32 m = 3;                // "m" from n, how many valid signatures is necessary for spending
  HDNodeType nodes = 4;        // simplified way how to specify pubkeys if they share the same address_n path
  uint32 address_n = 5;        // use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
  /**
    * Structure representing HDNode + Path
    */
  message HDNodePathType {
    HDNodeType node = 1;   // BIP-32 node in deserialized form
    uint32 address_n = 2;  // BIP-32 path to derive the key from node
  }
}

/**
 * Request: Ask device for public key corresponding to address_n path
 * #start
 * #next PublicKey
 * #next Failure
 */
message GetPublicKey {
  uint32 address_n = 1;                                      // BIP-32 path to derive the key from master node
  string ecdsa_curve_name = 2;                               // ECDSA curve name to use
  bool show_display = 3;                                     // ly show on display before sending the result
  string coin_name = 4 [default = 'Bitcoin'];                // coin to use for verifying
  InputScriptType script_type = 5 [default = SPENDADDRESS];  // used to distinguish between various address formats (non-segwit, segwit, etc.)
}

/**
 * Response: Contains public key derived from device private seed
 * #end
 */
message PublicKey {
  HDNodeType node = 1;  // BIP32 public node
  string xpub = 2;      // serialized form of public node
}

/**
 * Request: Ask device for address corresponding to address_n path
 * #start
 * #next Address
 * #next Failure
 */
message GetAddress {
  uint32 address_n = 1;                                      // BIP-32 path to derive the key from master node
  string coin_name = 2 [default = 'Bitcoin'];                // coin to use
  bool show_display = 3;                                     // ly show on display before sending the result
  MultisigRedeemScriptType multisig = 4;                     // filled if we are showing a multisig address
  InputScriptType script_type = 5 [default = SPENDADDRESS];  // used to distinguish between various address formats (non-segwit, segwit, etc.)
}

/**
 * Response: Contains address derived from device private seed
 * #end
 */
message Address {
  string address = 1;  // Coin address in Base58 encoding
}

/**
 * Request: Ask device to sign message
 * #start
 * #next MessageSignature
 * #next Failure
 */
message SignMessage {
  uint32 address_n = 1;                                      // BIP-32 path to derive the key from master node
  bytes message = 2;                                         // message to be signed
  string coin_name = 3 [default = 'Bitcoin'];                // coin to use for signing
  InputScriptType script_type = 4 [default = SPENDADDRESS];  // used to distinguish between various address formats (non-segwit, segwit, etc.)
}

/**
 * Response: Signed message
 * #end
 */
message MessageSignature {
  string address = 1;   // address used to sign the message
  bytes signature = 2;  // signature of the message
}

/**
 * Request: Ask device to verify message
 * #start
 * #next Success
 * #next Failure
 */
message VerifyMessage {
  string address = 1;                          // address to verify
  bytes signature = 2;                         // signature to verify
  bytes message = 3;                           // message to verify
  string coin_name = 4 [default = 'Bitcoin'];  // coin to use for verifying
}

/**
 * Request: Ask device to sign transaction
 * #start
 * #next TxRequest
 * #next Failure
 */
message SignTx {
  uint32 outputs_count = 1;                    // number of transaction outputs
  uint32 inputs_count = 2;                     // number of transaction inputs
  string coin_name = 3 [default = 'Bitcoin'];  // coin to use
  uint32 version = 4 [default = 1];            // transaction version
  uint32 lock_time = 5 [default = 0];          // transaction lock_time
  uint32 expiry = 6;                           // only for Decred and Zcash
  bool overwintered = 7;                       // only for Zcash
  uint32 version_group_id = 8;                 // only for Zcash, nVersionGroupId when overwintered is set
  uint32 timestamp = 9;                        // only for Capricoin, transaction timestamp
  uint32 branch_id = 10;                       // only for Zcash, BRANCH_ID when overwintered is set
}

/**
 * Response: Device asks for information for signing transaction or returns the last result
 * If request_index is set, device awaits TxAck message (with fields filled in according to request_type)
 * If signature_index is set, 'signature' contains signed input of signature_index's input
 * #end
 * #next TxAck
 */
message TxRequest {
  RequestType request_type = 1;            // what should be filled in TxAck message?
  TxRequestDetailsType details = 2;        // request for tx details
  TxRequestSerializedType serialized = 3;  // serialized data and request for next
  /**
    * Type of information  by transaction signing process
    */
  enum RequestType {
    TXINPUT = 0;
    TXOUTPUT = 1;
    TXMETA = 2;
    TXFINISHED = 3;
    TXEXTRADATA = 4;
  }
  /**
    * Structure representing request details
    */
  message TxRequestDetailsType {
    uint32 request_index = 1;      // device expects TxAck message from the computer
    bytes tx_hash = 2;             // tx_hash of requested transaction
    uint32 extra_data_len = 3;     // length of requested extra data
    uint32 extra_data_offset = 4;  // offset of requested extra data
  }
  /**
    * Structure representing serialized data
    */
  message TxRequestSerializedType {
    uint32 signature_index = 1;  // 'signature' field contains signed input of this index
    bytes signature = 2;         // signature of the signature_index input
    bytes serialized_tx = 3;     // part of serialized and signed transaction
  }
}

/**
 * Request: Reported transaction data
 * #next TxRequest
 */
message TxAck {
  TransactionType tx = 1;
  /**
    * Structure representing transaction
    */
  message TransactionType {
    uint32 version = 1;
    TxInputType inputs = 2;
    TxOutputBinType bin_outputs = 3;
    uint32 lock_time = 4;
    TxOutputType outputs = 5;
    uint32 inputs_cnt = 6;
    uint32 outputs_cnt = 7;
    bytes extra_data = 8;          // only for Zcash
    uint32 extra_data_len = 9;     // only for Zcash
    uint32 expiry = 10;            // only for Decred and Zcash
    bool overwintered = 11;        // only for Zcash
    uint32 version_group_id = 12;  // only for Zcash, nVersionGroupId when overwintered is set
    uint32 timestamp = 13;         // only for Capricoin, transaction timestamp
    uint32 branch_id = 14;         // only for Zcash, BRANCH_ID when overwintered is set
    /**
        * Structure representing transaction input
        */
    message TxInputType {
      uint32 address_n = 1;                                      // BIP-32 path to derive the key from master node
      bytes prev_hash = 2;                                       // hash of previous transaction output to spend by this input
      uint32 prev_index = 3;                                     // index of previous output to spend
      bytes script_sig = 4;                                      // script signature, unset for tx to sign
      uint32 sequence = 5 [default = 4294967295];                // sequence (default=0xffffffff)
      InputScriptType script_type = 6 [default = SPENDADDRESS];  // defines template of input script
      MultisigRedeemScriptType multisig = 7;                     // Filled if input is going to spend multisig tx
      uint64 amount = 8;                                         // amount of previous transaction output (for segwit only)
      uint32 decred_tree = 9;                                    // only for Decred
      uint32 decred_script_version = 10;                         // only for Decred
      bytes prev_block_hash_bip115 = 11;                         // block hash of previous transaction output (for bip115 implementation)
      uint32 prev_block_height_bip115 = 12;                      // block height of previous transaction output (for bip115 implementation)
    }
    /**
        * Structure representing compiled transaction output
        */
    message TxOutputBinType {
      uint64 amount = 1;
      bytes script_pubkey = 2;
      uint32 decred_script_version = 3;  // only for Decred
    }
    /**
        * Structure representing transaction output
        */
    message TxOutputType {
      string address = 1;                     // target coin address in Base58 encoding
      uint32 address_n = 2;                   // BIP-32 path to derive the key from master node; has higher priority than "address"
      uint64 amount = 3;                      // amount to spend in satoshis
      OutputScriptType script_type = 4;       // output script type
      MultisigRedeemScriptType multisig = 5;  // defines multisig address; script_type must be PAYTOMULTISIG
      bytes op_return_data = 6;               // defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
      uint32 decred_script_version = 7;       // only for Decred
      bytes block_hash_bip115 = 8;            // block hash of existing block (recommended current_block - 300) (for bip115 implementation)
      uint32 block_height_bip115 = 9;         // block height of existing block (recommended current_block - 300) (for bip115 implementation)
      enum OutputScriptType {
        PAYTOADDRESS = 0;      // used for all addresses (bitcoin, p2sh, witness)
        PAYTOSCRIPTHASH = 1;   // p2sh address (deprecated; use PAYTOADDRESS)
        PAYTOMULTISIG = 2;     // only for change output
        PAYTOOPRETURN = 3;     // op_return
        PAYTOWITNESS = 4;      // only for change output
        PAYTOP2SHWITNESS = 5;  // only for change output
      }
    }
  }
}