syntax = "proto3";

/**
 * Request: Reset device to default state and ask for device details
 * #start
 * #next Features
 */
message Initialize {
  bytes state = 1;           // assumed device state, clear session if set and different
  bool skip_passphrase = 2;  // this session should always assume empty passphrase
}

/**
 * Response: Reports various information about the device
 * #end
 */
message Features {
  optional string vendor = 1;           // name of the manufacturer, e.g. "ABCKEY.COM"
  optional string model = 21;           // device hardware model
  optional uint32 major_version = 2;    // major version of the firmware/bootloader, e.g. 1
  optional uint32 minor_version = 3;    // minor version of the firmware/bootloader, e.g. 0
  optional uint32 patch_version = 4;    // patch version of the firmware/bootloader, e.g. 0
  optional bool bootloader_mode = 5;    // is device in bootloader mode?
  optional bool firmware_present = 18;  // is valid firmware loaded?

  optional string device_id = 6;            // device's unique identifier
  optional bool pin_protection = 7;         // is device protected by PIN?
  optional bool passphrase_protection = 8;  // is node/mnemonic encrypted using passphrase?
  optional string language = 9;             // device language
  optional string label = 10;               // device description label
  optional bool initialized = 12;           // does device contain seed?
  optional bytes revision = 13;             // SCM revision of firmware
  optional bytes bootloader_hash = 14;      // hash of the bootloader
  optional bool imported = 15;              // was storage imported from an external source?
  optional bool pin_cached = 16;            // is PIN already cached in session?
  optional bool passphrase_cached = 17;     // is passphrase already cached in session?

  optional bool needs_backup = 19;  // does storage need backup? (equals to Storage.needs_backup)
  optional uint32 flags = 20;       // device flags (equals to Storage.flags)

  optional uint32 fw_major = 22;          // reported firmware version if in bootloader mode
  optional uint32 fw_minor = 23;          // reported firmware version if in bootloader mode
  optional uint32 fw_patch = 24;          // reported firmware version if in bootloader mode
  optional string fw_vendor = 25;         // reported firmware vendor if in bootloader mode
  optional bytes fw_vendor_keys = 26;     // reported firmware vendor keys (their hash)
  optional bool unfinished_backup = 27;   // report unfinished backup (equals to Storage.unfinished_backup)
  optional bool no_backup = 28;           // report no backup (equals to Storage.no_backup)
  optional bool recovery_mode = 29;       // is recovery mode in progress
  repeated Capability capabilities = 30;  // list of supported capabilities
  enum Capability {
    Capability_Bitcoin = 1;
    Capability_Bitcoin_like = 2;  // Altcoins based on the Bitcoin source code
    Capability_Binance = 3;
    Capability_Cardano = 4;
    Capability_Crypto = 5;  // generic crypto operations for GPG, SSH, etc.
    Capability_EOS = 6;
    Capability_Ethereum = 7;
    Capability_Lisk = 8;
    Capability_Monero = 9;
    Capability_NEM = 10;
    Capability_Ripple = 11;
    Capability_Stellar = 12;
    Capability_Tezos = 13;
    Capability_U2F = 14;
    Capability_Shamir = 15;
    Capability_ShamirGroups = 16;
  }
}