syntax = "proto3";
import "google/protobuf/descriptor.proto";

/**
 * Options for specifying message direction and type of wire (normal/debug)
 */
extend google.protobuf.EnumValueOptions {
  bool wire_in = 50002;          // message can be transmitted via wire from PC to ABCKEY
  bool wire_out = 50003;         // message can be transmitted via wire from ABCKEY to PC
  bool wire_debug_in = 50004;    // message can be transmitted via debug wire from PC to ABCKEY
  bool wire_debug_out = 50005;   // message can be transmitted via debug wire from ABCKEY to PC
  bool wire_bootloader = 50006;  // message is handled by ABCKEY when the USB stack is in tiny mode
  bool wire_boot = 50007;        // message is only handled by ABCKEY Bootloader
  bool wire_no_fsm = 50008;      // message is not handled by ABCKEY unless the USB stack is in tiny mode
}

/**
 * Mapping between Trezor wire identifier (uint) and a protobuf message
 */
enum Types {
  // Management
  Initialize = 0 [(wire_in) = true, (wire_tiny) = true];  // ABCKEY and Trezor are supported.
  GetFeatures = 55 [(wire_in) = true];                    // ABCKEY and Trezor are supported.
  Ping = 1 [(wire_in) = true];                            // ABCKEY and Trezor are supported.
  ClearSession = 24 [(wire_in) = true];                   // ABCKEY and Trezor are supported.
  ResetDevice = 14 [(wire_in) = true];                    // ABCKEY and Trezor are supported.
  EntropyAck = 36 [(wire_in) = true];                     // ABCKEY and Trezor are supported.
  ChangePin = 4 [(wire_in) = true];                       // TODO
  WipeDevice = 5 [(wire_in) = true];                      // TODO
  GetEntropy = 9 [(wire_in) = true];                      // 提示需要按键确认
  LoadDevice = 13 [(wire_in) = true];                     // TODO
  BackupDevice = 34 [(wire_in) = true];                   // TODO
  RecoveryDevice = 45 [(wire_in) = true];
  ApplySettings = 25 [(wire_in) = true];
  ApplyFlags = 28 [(wire_in) = true];
  WordAck = 47 [(wire_in) = true];

  // SetU2FCounter = 63 [(wire_in) = true];

  // PinMatrixAck = 19 [(wire_in) = true, (wire_tiny) = true, (wire_no_fsm) = true];
  Cancel = 20 [(wire_in) = true, (wire_tiny) = true];
  ButtonAck = 27 [(wire_in) = true, (wire_tiny) = true, (wire_no_fsm) = true];
  PassphraseAck = 42 [(wire_in) = true, (wire_tiny) = true, (wire_no_fsm) = true];
  PassphraseStateAck = 78 [(wire_in) = true, (wire_tiny) = true, (wire_no_fsm) = true];

  Success = 2 [(wire_out) = true];          // ABCKEY and Trezor are supported.
  Failure = 3 [(wire_out) = true];          // ABCKEY and Trezor are supported.
  Features = 17 [(wire_out) = true];        // ABCKEY and Trezor are supported.
  EntropyRequest = 35 [(wire_out) = true];  // ABCKEY and Trezor are supported.
  Entropy = 10 [(wire_out) = true];
  PinMatrixRequest = 18 [(wire_out) = true];
  ButtonRequest = 26 [(wire_out) = true];
  PassphraseRequest = 41 [(wire_out) = true];
  PassphraseStateRequest = 77 [(wire_out) = true];
  WordRequest = 46 [(wire_out) = true];

  // Bootloader
  FirmwareErase = 6 [(wire_in) = true, (wire_bootloader) = true];   // ABCKEY and Trezor are supported.
  FirmwareUpload = 7 [(wire_in) = true, (wire_bootloader) = true];  // ABCKEY and Trezor are supported.

  // Bitcoin
  GetPublicKey = 11 [(wire_in) = true];
  SignTx = 15 [(wire_in) = true];
  TxAck = 22 [(wire_in) = true];
  GetAddress = 29 [(wire_in) = true];
  SignMessage = 38 [(wire_in) = true];
  VerifyMessage = 39 [(wire_in) = true];
  PublicKey = 12 [(wire_out) = true];
  Address = 30 [(wire_out) = true];
  TxRequest = 21 [(wire_out) = true];
  MessageSignature = 40 [(wire_out) = true];
}